<!--
Generated with jinja_world_gen.py
@author: Benjamin Perseghetti
@email: bperseghetti@rudislabs.com
-->
<sdf version="1.8">
  <world name="{{ name }}">
    <physics name='1ms' type='ignored'>
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>1000</real_time_update_rate>
    </physics>
    <plugin name='ignition::gazebo::systems::Physics' filename='ignition-gazebo-physics-system'/>
    <plugin name='ignition::gazebo::systems::UserCommands' filename='ignition-gazebo-user-commands-system'/>
    <plugin name='ignition::gazebo::systems::SceneBroadcaster' filename='ignition-gazebo-scene-broadcaster-system'/>
    <plugin name='ignition::gazebo::systems::Contact' filename='ignition-gazebo-contact-system'/>
    <plugin filename="ignition-gazebo-sensors-system" name="ignition::gazebo::systems::Sensors">
      <render_engine>ogre2</render_engine>
    </plugin>

    <gui fullscreen='0'>
      <plugin name='3D View' filename='GzScene3D'>
        <ignition-gui>
          <title>3D View</title>
          <property type='bool' key='showTitleBar'>0</property>
          <property type='string' key='state'>docked</property>
        </ignition-gui>
        <engine>ogre2</engine>
        <scene>scene</scene>
    {%- if sun.model == 'sunNight' %}
      {%- set ambientLight='0.01' -%}
      {%- set backgroundColor='0.05' -%}
    {%- endif %}
    {%- if sun.model == 'sunNone' %}
      {%- set ambientLight='0.4' -%}
      {%- set backgroundColor='0.8' -%}
    {%- endif %}
    {%- if sun.model == 'sunNoon' %}
      {%- set ambientLight='0.6' -%}
      {%- set backgroundColor='0.85' -%}
    {%- endif %}
    {%- if sun.model == 'sunUTC' %}
      {%- set ambientLight=sun.ambientLight -%}
      {%- set backgroundColor=sun.backgroundColor -%}
    {%- endif %}
        <ambient_light>{{ ambientLight }} {{ ambientLight }} {{ ambientLight }}</ambient_light>
        <background_color>{{ backgroundColor }} {{ backgroundColor }} {{ backgroundColor }}</background_color>
      {%- if skybox == '1' %}
        <sky></sky>
      {%- endif %}
        <camera_pose>-6 0 6 0 0.5 0</camera_pose>
      </plugin>
      <plugin name='World control' filename='WorldControl'>
        <ignition-gui>
          <title>World control</title>
          <property type='bool' key='showTitleBar'>0</property>
          <property type='bool' key='resizable'>0</property>
          <property type='double' key='height'>72</property>
          <property type='double' key='width'>121</property>
          <property type='double' key='z'>1</property>
          <property type='string' key='state'>floating</property>
          <anchors target='3D View'>
            <line own='left' target='left'/>
            <line own='bottom' target='bottom'/>
          </anchors>
        </ignition-gui>
        <play_pause>1</play_pause>
        <step>1</step>
        <start_paused>1</start_paused>
      </plugin>
      <plugin name='World stats' filename='WorldStats'>
        <ignition-gui>
          <title>World stats</title>
          <property type='bool' key='showTitleBar'>0</property>
          <property type='bool' key='resizable'>0</property>
          <property type='double' key='height'>110</property>
          <property type='double' key='width'>290</property>
          <property type='double' key='z'>1</property>
          <property type='string' key='state'>floating</property>
          <anchors target='3D View'>
            <line own='right' target='right'/>
            <line own='bottom' target='bottom'/>
          </anchors>
        </ignition-gui>
        <sim_time>1</sim_time>
        <real_time>1</real_time>
        <real_time_factor>1</real_time_factor>
        <iterations>1</iterations>
      </plugin>
      <plugin name='Entity tree' filename='EntityTree'/>
    </gui>
    <gravity>0 0 -9.8</gravity>
    <magnetic_field>6e-06 2.3e-05 -4.2e-05</magnetic_field>
    <atmosphere type='adiabatic'/>
    <scene>
      <grid>0</grid>
    </scene>
  {%- if ((sun.model == 'sunNoon') or (sun.model == 'sunUTC')) %}
      {%- set sunPose='0 0 500 0 0 0' -%}
      {%- set sunAttenuationRange='2000' -%}
      {%- set sunAttenuationConstant='1.0' -%}
      {%- set sunAttenuationLinear='0.0' -%}
      {%- set sunAttenuationQuadratic='0.0' -%}
    {%- if sun.model == 'sunNoon' %}
      {%- set sunDiffuse='0.95 0.95 0.95 1' -%}
      {%- set sunSpecular='0.3 0.3 0.3 1' -%}
      {%- set sunVector='-0.01 0.01 -1.0' -%}
    {%- endif %}
    {%- if sun.model == 'sunUTC' %}
      {%- set sunDiffuse=sun.diffuse -%}
      {%- set sunSpecular=sun.specular -%}
      {%- set sunVector=sun.vector -%}
    {%- endif %}
    <light type="directional" name="{{ sun.model }}">
      <cast_shadows>true</cast_shadows>
      <pose>{{ sunPose }}</pose>
      <diffuse>{{ sunDiffuse }}</diffuse>
      <specular>{{ sunSpecular }}</specular>
      <attenuation>
        <range>{{ sunAttenuationRange }}</range>
        <constant>{{ sunAttenuationConstant }}</constant>
        <linear>{{ sunAttenuationLinear }}</linear>
        <quadratic>{{ sunAttenuationQuadratic }}</quadratic>
      </attenuation>
      <direction>{{ sunVector }}</direction>
    </light>
  {%- endif %}
  {%- if wind != 'NotSet' %}
    <plugin
      filename="ignition-gazebo-wind-effects-system"
      name="ignition::gazebo::systems::WindEffects">
      <force_approximation_scaling_factor>1</force_approximation_scaling_factor>
      <horizontal>
        <magnitude>
          <time_for_rise>10</time_for_rise>
          <sin>
            <amplitude_percent>0.05</amplitude_percent>
            <period>60</period>
          </sin>
          <noise type="gaussian">
           <mean>0</mean>
           <stddev>0.0002</stddev>
          </noise>
        </magnitude>
        <direction>
          <time_for_rise>30</time_for_rise>
          <sin>
            <amplitude>5</amplitude>
            <period>20</period>
          </sin>
          <noise type="gaussian">
           <mean>0</mean>
           <stddev>0.03</stddev>
          </noise>
        </direction>
      </horizontal>
      <vertical>
        <noise type="gaussian">
         <mean>0</mean>
         <stddev>0.03</stddev>
        </noise>
      </vertical>
    </plugin>
    <wind>
      <linear_velocity>{{ wind.linearVelocity }}</linear_velocity>
    </wind>
  {%- endif %}
  {%- if WGS84.useSphericalCoords == '1' %}
    <spherical_coordinates>
      <surface_model>EARTH_WGS84</surface_model>
      <world_frame_orientation>ENU</world_frame_orientation>
      <latitude_deg>{{ WGS84.degLatitude }}</latitude_deg>
      <longitude_deg>{{ WGS84.degLongitude }}</longitude_deg>
      <elevation>{{ WGS84.mAltitude }}</elevation>
      <heading_deg>0</heading_deg>
    </spherical_coordinates>
  {%- endif %}
  {%- if name == 'ground_plane' %}
    <model name="ground_plane">
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
            </plane>
          </geometry>
        </collision>
        <visual name="visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>100 100</size>
            </plane>
          </geometry>
          <material>
              <ambient>0.8 0.8 0.8 1</ambient>
              <diffuse>0.8 0.8 0.8 1</diffuse>
              <specular>0.8 0.8 0.8 1</specular>
          </material>
        </visual>
      </link>
    </model>
  {%- endif %}
  {%- if embeddedModels != 'NotSet' %}{% for model in embeddedModels %}
    <include>
      <name>{{ embeddedModels[model].name }}</name>
      <uri>model://{{ embeddedModels[model].model }}</uri>
      <pose>{{ embeddedModels[model].pose }}</pose>
    </include>
  {%- endfor %}{%- endif %}
  {%- if actors != 'NotSet' %}{% for actor in actors %}
    <actor name="{{ actors[actor].name }}">
      <skin>
        <filename>{{ actors[actor].skin.file }}</filename>
        <scale>{{ actors[actor].skin.scale }}</scale>
      </skin>
      <animation name="{{ actors[actor].animation.name }}">
        <filename>{{ actors[actor].animation.file }}</filename>
        <scale>{{ actors[actor].animation.scale }}</scale>
        <interpolate_x>{{ actors[actor].animation.interpolate_x }}</interpolate_x>
      </animation>
      <script>
        <loop>{{ actors[actor].script.loop }}</loop>
        <delay_start>{{ actors[actor].script.delay }}</delay_start>
        <auto_start>{{ actors[actor].script.auto_start }}</auto_start>
        <trajectory id="{{ actors[actor].script.trajectory.id }}" type="{{ actors[actor].script.trajectory.type }}" tension="{{ actors[actor].script.trajectory.tension }}">
          {%- for waypoint in actors[actor].script.trajectory.waypoints  %}
          <waypoint>
            <time>{{ actors[actor].script.trajectory.waypoints[waypoint].time }}</time>
            <pose>{{ actors[actor].script.trajectory.waypoints[waypoint].pose }}</pose>
          </waypoint>
          {%- endfor %}
        </trajectory>
      </script>
    </actor>
  {%- endfor %}{%- endif %}
  </world>
</sdf>
